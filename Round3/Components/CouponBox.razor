<style>
    .coupon-box {
        display: flex;
        align-items: center;
        border: 1px solid #ccc;
        background-color: white; /* Set background color to white */
        padding: 0 3px; /* Remove top and bottom padding */
        box-sizing: border-box; /* Include padding and border in the width calculation */
    }

        .coupon-box span {
            margin: 0; /* Minimal margin for glyphs */
            white-space: nowrap;
        }

        .coupon-box input[type="text"] {
            flex-grow: 1;
            font-size: 14px;
            width: calc(100% - 40px); /* Adjusts width dynamically, accounting for glyphs and some padding */
            border: none; /* Remove input field border */
            outline: none; /* Remove focus outline */
            margin: 0; /* Remove margins */
            padding: 2px 3px; /* Minimal padding */
            background-color: transparent; /* Background color transparent */
        }

    .coupon-button {
        cursor: pointer;
        user-select: none; /* Prevents text selection */
    }
</style>

<div class="coupon-box">
    <span>🏷️</span>
    <input type="text"
           id="couponBox"
           value="@coupon"
           readonly="@processing"
           @oninput="OnInputChanged"
           onpaste="handlePaste(event)"
           onkeypress="validateInput(event)"
           placeholder="Coupon (Optional)" />
    <span class="coupon-button"
          @onclick="ClearCoupon"
          title="Clear"
          disabled="@IsInputEmpty">
        ❌
    </span>
    <span class="coupon-button" @onclick="ValidateCouponAsync"
          title="Apply"
          disabled="@IsInputEmpty">
        @actionLabel
    </span>
</div>

<script>
    function validateInput(event) {
        var char = event.key;

        if (!char.match(/^[0-9a-zA-Z]+$/)) {
            event.preventDefault();
        }
    }
    function handlePaste(event) {
        event.preventDefault();

        const pastedText = (event.clipboardData || window.clipboardData).getData('text');

        if (/^[a-z0-9]+$/i.test(pastedText)) {
            insertAtCaret(event.target, pastedText);
        }
    }
    function insertAtCaret(input, textToInsert) {
        const startPos = input.selectionStart;
        const endPos = input.selectionEnd;

        input.value = input.value.substring(0, startPos)
            + textToInsert + input.value.substring(endPos);

        input.selectionStart = input.selectionEnd = startPos + textToInsert.length;
    }
</script>

@code {
    private string coupon { get; set; } = "";
    private string actionLabel { get; set; } = "➡️";
    private bool processing { get; set; } = false;

    event EventHandler? OnCoupon;

    private async Task ValidateCouponAsync()
    {
        if (string.IsNullOrWhiteSpace(coupon))
            return;

        processing = true;
        actionLabel = "⏳";

        await Task.Delay(5000);

        actionLabel = new Random().Next(2) == 0 ? "✅" : "🚫";

        processing = false;
    }

    private bool IsInputEmpty => string.IsNullOrWhiteSpace(coupon);

    private void ClearCoupon()
    {
        if (processing)
            return;

        coupon = "";
        actionLabel = "➡️";
    }

    private void OnInputChanged(ChangeEventArgs e)
    {
        coupon = e.Value?.ToString() ?? "";

        if (!processing)
            actionLabel = "➡️";

        StateHasChanged();
    }
}