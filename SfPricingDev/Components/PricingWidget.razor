@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using SfPricingDev.Helpers;
@using Syncfusion
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Lists;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Inputs
@using SfPricingDev.Models
@using System.Text
@using B = Syncfusion.Blazor.Buttons;

<link rel="stylesheet" href="PricingWidget.css" />

<script>
    function invokeCheckout(quantity) {
        var link = document.createElement('a');
        link.href = "javascript:void(0)";
        link.setAttribute('data-cb-type', 'checkout');
        link.setAttribute('data-cb-item-0', 'Premium-USD-Monthly');
        link.setAttribute('data-cb-item-0-quantity', quantity);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

<div class="@GetPlanClasses()" style="@GetPlanBorderStyle()">
    <SfTooltip Content="@Plan.ToTagLine()">
        <h1><b>@Plan</b></h1>
    </SfTooltip>

    <div>
        <span class="price">$@price</span>
        @if (Plan == Plan.Flex)
        {
            <span> / @MonthOrYear()</span>
        }
        else
        {
            <span> / month</span>
        }
    </div>

    @if (Plan == Plan.Flex)
    {
        <SfSlider TValue="int" Width="200" Min="1" Max="25"
                  Value="@quantity" CssClass="slider">
            <SliderEvents TValue="int" OnChange="OnChange"></SliderEvents>
            <p style="padding-top:24px;">slide to select max-lots</p>
        </SfSlider>
    }

    <div class="benefits-container">
        @foreach (var benefit in benefits!)
        {
            <div class="benefit">
                <SfTooltip Content="@benefit.Tooltip">
                    @benefit.GetFragment()
                </SfTooltip>
            </div>
        }
        @if (Plan == Plan.Flex)
        {
            <br />
            <div style="display: flex; align-items: center; justify-content: center;">
                pre-pay & save 20%&nbsp;
                <SfSwitch @bind-Checked="prePayAndSave"
                          ValueChange="OnChange" TChecked="bool?" />
            </div>
        }
    </div>
    <br />
    <button class="choose-plan-button" @onclick="InvokeCheckout">Choose Plan</button>
</div>

@code {
    bool? prePayAndSave = false;
    int quantity = 1;

    double price;
    bool showSlider;
    List<Benefit>? benefits;

    protected override void OnInitialized()
    {
        benefits = Plan.ToBenefits(quantity, prePayAndSave == true);
        showSlider = Plan == Plan.Flex;

        UpdatePrice();
    }

    [Parameter]
    public Plan Plan { get; set; } = Plan.Free;

    void UpdatePrice()
    {
        price = PricingHelper.GetPrice(Plan, quantity,
            prePayAndSave == true ? Billing.Year : Billing.Month);
    }

    private string GetPlanBorderStyle()
    {
        return Plan == Plan.Flex
            ? "border: 5px solid #ccc;"
            : "border: 2px solid #ccc;";
    }

    private string GetPlanClasses()
    {
        var classes = "plan";

        if (Plan == Plan.Flex)
            classes += " flex-plan";

        return classes;
    }

    public void OnChange(SliderChangeEventArgs<int> args)
    {
        quantity = args.Value;

        UpdatePrice();

        benefits = Plan.ToBenefits(quantity, prePayAndSave == true);
    }

    private void OnChange(B.ChangeEventArgs<bool?> args)
    {
        UpdatePrice();

        benefits = Plan.ToBenefits(quantity, prePayAndSave == true);
    }

    private string MonthOrYear() => prePayAndSave == true ? "year" : "month";

    private async Task InvokeCheckout()
    {
        await JSRuntime.InvokeVoidAsync("invokeCheckout", quantity);
    }
}
