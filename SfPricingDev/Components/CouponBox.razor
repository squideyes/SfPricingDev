@code {
    private string CouponCode { get; set; } = "";
    private string ButtonLabel { get; set; } = "➡️"; // Right arrow emoji
    private bool IsProcessing { get; set; } = false;

    private async Task ValidateCouponCodeAsync()
    {
        if (string.IsNullOrWhiteSpace(CouponCode))
            return;

        IsProcessing = true;
        ButtonLabel = "⏳"; // Waiting icon
        await Task.Delay(2000); // Simulate API call delay

        // Simulate random coupon validation result
        ButtonLabel = new Random().Next(2) == 0 ? "✅" : "🚫";

        IsProcessing = false;
    }

    private bool IsInputEmpty => string.IsNullOrWhiteSpace(CouponCode);

    private void ClearCouponCode()
    {
        CouponCode = "";
        ButtonLabel = "➡️"; // Reset to right arrow emoji
    }

    private void OnInputChanged(ChangeEventArgs e)
    {
        CouponCode = e.Value?.ToString() ?? "";

        if (!IsProcessing)
            ButtonLabel = "➡️"; // Reset to right arrow emoji if not processing

        StateHasChanged(); // Invoke re-rendering
    }
}

<div class="coupon-input-container">
    <div class="input-wrapper">
        <span class="coupon-label">🏷️</span>
        <input type="text"
               value="@CouponCode"
               @oninput="OnInputChanged"
               placeholder="Apply Coupon"
               readonly="@IsProcessing" />
        <button @onclick="ClearCouponCode"
                disabled="@IsInputEmpty"
                class="clear-button">
            <span class="button-content">❌</span>
        </button>
        <button @onclick="ValidateCouponCodeAsync"
                disabled="@IsInputEmpty"
                class="validate-button">
            <span class="button-content">@ButtonLabel</span>
        </button>

    </div>
</div>

<style>
    .coupon-input-container {
        display: flex;
        justify-content: center;
    }

    .input-wrapper {
        display: flex;
        align-items: center;
        border: 2px solid #ccc;
        border-radius: 4px; /* Optional: rounded corners */
    }

    .coupon-label {
        margin: 0;
        font-size: 20px; /* Adjust size as needed */
    }

    input {
        flex-grow: 1;
        border: none;
        padding-left: 5px;
        padding-right: 5px;
    }

        input:focus {
            outline: none; /* Optional: remove focus outline */
        }

    .clear-button, .validate-button {
        background: none;
        border: none; /* No border for buttons */
        cursor: pointer;
        margin: 0; /* No margin for buttons */
        padding: 0; /* No padding for buttons */
        font-size: 20px; /* Adjust size as needed */
        cursor: pointer;
    }

    /* Ensure that all child elements of the button inherit the color */
    button * {
        color: inherit;
    }

    /* Overriding hover effect for disabled buttons */
    button:disabled, button:disabled:hover {
        color: inherit; /* Ensure emojis inherit the color of the button */
        background-color: #f0f0f0; /* Light gray background for disabled buttons */
        cursor: default; /* Non-interactive cursor for disabled buttons */
    }

    /* Additional specific selector for hover effect to prevent blue color */
    .clear-button:hover, .validate-button:hover {
        background-color: transparent; /* Maintains the background on hover */
    }

    /* Even more specific selector for disabled buttons on hover */
    .clear-button:disabled:hover, .validate-button:disabled:hover {
        background-color: #f0f0f0; /* Keeps the background color consistent for disabled buttons */
    }

    .button-content {
        color: inherit; /* Ensure content color matches the button */
    }

    /* Specific styles for button content when the button is disabled */
    button:disabled .button-content {
        color: #ccc; /* Gray out the content */
    }
</style>